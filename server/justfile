set export
set dotenv-load

PORT := "8000"

APPLICATION_NAME := "buddy-server"

DATABASE_USER := "buddy-user"
DATABASE_PASSWORD := "secure-password"
DATABASE_HOST := "db"
DATABASE_PORT := "5432"
DATABASE_NAME := "buddy_db"
DATABASE_SSLMODE := "disable"

JWT_EXPIRE_MINUTES := "30"
JWT_ALGORITHM := "HS256"
JWT_SECRET_KEY := "not_so_secure_secret"

DOCKER_REGISTRY := "europe-west1-docker.pkg.dev"

UV_VERSION := "0.6.2"

# List available commands
default:
    just --list --unsorted

# Build the docker image
build:
    docker rm -f $APPLICATION_NAME || true
    docker build -t $APPLICATION_NAME .

# Run the docker image
run: stop
    #!/bin/zsh

    export DATABASE_HOST="host.docker.internal"
    export DATABASE_URL="postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME"

    docker stop $APPLICATION_NAME || true
    docker run --name $APPLICATION_NAME -e DATABASE_URL="$DATABASE_URL" \
        -e OPENAI_API_KEY=$OPENAI_API_KEY -e GOOGLE_AI_API_KEY=$GOOGLE_AI_API_KEY \
        -d -p 8000:80 $APPLICATION_NAME

stop:
    docker stop $APPLICATION_NAME || true

# Build and run the docker image
run-build: build run

# Tag the docker image
tag-image:
    docker tag $APPLICATION_NAME "$DOCKER_REGISTRY/$GCP_PROJECT_ID/$APPLICATION_NAME/$APPLICATION_NAME:$COMMIT_SHA"

# Push the docker image
push-image:
    docker push "$DOCKER_REGISTRY/$GCP_PROJECT_ID/$APPLICATION_NAME/$APPLICATION_NAME:$COMMIT_SHA"

# Run server in dev mode
dev:
    #!/bin/zsh

    export DATABASE_URL="postgresql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?sslmode=$SSLMODE"

    uv run uvicorn src.buddy.main:app --reload --host 0.0.0.0 --port $PORT

# Test
test:
    uv run pytest

# Test with code coverage
test-cov:
    uv run pytest --cov=src/buddy

# Install modules
install-modules:
    #!/bin/zsh

    . ~/.zshrc

    echo "Installing modules"
    echo "UV version: $(uv --version)"
    uv sync

# Type check
type-check:
    uv run mypy .

# Format code
format:
    uv run ruff format .

# Quality checks
quality: lint type-check format

# Lint code
lint:
    uv run ruff check .

# Lint and fix any issues that can be fixed automatically
lint-fix:
    uv run ruff check . --fix

# Prepare project to work with
prepare: install-modules

# Bootstrap project
bootstrap: install-uv prepare

[private]
install-uv:
    #!/bin/zsh

    if ! which uv > /dev/null
    then
        echo "Installing uv"
        curl -LsSf https://astral.sh/uv/$UV_VERSION/install.sh | sh
    fi
